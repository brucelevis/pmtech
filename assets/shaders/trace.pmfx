#include "libs/globals.pmfx"
#include "libs/maths.pmfx"
#include "libs/lighting.pmfx"
#include "ray_march.pmfx"

struct vs_output
{
    float4 position : SV_POSITION;
    float4 texcoord : TEXCOORD0;
};

struct vs_input
{
    float4 position : POSITION;
    float4 texcoord : TEXCOORD0;
};

struct ps_output
{
    float4 colour : SV_Target;
};

vs_output vs_ndc_quad( vs_input input )
{
    vs_output output;

    output.position = input.position;
    output.texcoord = input.texcoord;
        
    return output;
}

float hash( float p )
{
    float2 MOD2 = float2(3.07965, 7.4235);
    float2 p2 = fract(float2(p, p) / MOD2);
    p2 += dot(p2.yx, p2.xy+19.19);
    return fract(p2.x * p2.y);
}

float hash( float2 p )
{
    float2 MOD2 = float2(3.07965, 7.4235);
    p  = fract(p / MOD2);
    p += dot(p.xy, p.yx+19.19);
    return fract(p.x * p.y);
}

float noise( float2 x )
{
    float2 p = floor(x);
    float2 f = fract(x);
    f = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0;
    float res = lerp(lerp( hash(n+  0.0), hash(n+  1.0),f.x),
                    lerp( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);
    return res;
}

float3x3 create_camera( float3 ro, float3 ta, float cr )
{
    float3 cw = normalize(ta-ro);
    float3 cp = float3(sin(cr), cos(cr), 0.0);
    float3 cu = normalize( cross(cw,cp) );
    float3 cv = cross(cu,cw);
    
    return from_columns_3x3( cu, cv, cw );
}

float bsin(float v)
{
    return sin(v) * 0.5 + 1.0;
}

float bcos(float v)
{
    return cos(v) * 0.5 + 1.0;
}

float3 irrid(float3 n, float3 rd)
{
    float nv = dot(n, -rd);
    float3 col = float3(0.0, 0.0, 0.0);
    col += sin(nv * float3(0.0, 1.0, 0.0) * 10.0 * 1.5) * 0.5 + 0.5;  
    col += sin(nv * float3(1.0, 0.0, 0.0) * 20.0 * 1.5) * 0.5 + 0.5;  
    col += sin(nv * float3(0.0, 0.0, 1.0) * 5.0 * 1.5) * 0.5 + 0.5;
    return clamp(normalize(col), 0.0, 1.0);
}

void cam_anim(float2 uv, float time, out float3 ro, out float3 rd)
{
    ro = float3(cos(time) * 10.0, 0.0, sin(time) * 10.0);
    float3 ta = float3( -0.5, -0.4, 0.5 );
    float3x3 cam = create_camera( ro, ta, time );
    float2 p = (uv * 2.0) - 1.0;
    
    rd = mul( normalize( float3(p.x, p.y, 2.0) ), cam); 
}

float2 bend_tc(float2 uv)
{
    float2 tc = uv;
    
    float2 cc = tc - 0.5;
    float dist = dot(cc, cc) * 0.07;
    
    tc = tc * (tc + cc * (1.0 + dist) * dist) / tc;
    
    return tc;
}

float3 crt_c(float3 src, float2 tc)
{
    float2 inv_texel = float2(1.0/640.0, 1.0/480.0);
    
    float2 ca = float2(inv_texel.x * 2.0, 0.0);
    
    src.rgb *= saturate(abs(sin(tc.y / inv_texel.y/2.0)) + 0.5);
    
    return src;
}

float3 sky(float3 v, float time)
{    
    float3 grad_a = float3(0.5, 0.5, 0.0);
    float3 grad_b = float3(0.5, 0.0, 1.0);
    
    grad_a = float3(bcos(time), 0.2, bcos(-time));
    grad_b = float3(bsin(time), bsin(-time), 0.2);
    
    float grad_t = v.y * 0.5 + 0.5;
    
    return lerp(grad_b, grad_a, grad_t);
}

float map_octahedron(float3 p)
{
    return sd_octahedron(p, 4.0);
}

float3 calc_normal_octahedron(float3 pos)
{
    float3 eps = float3(0.001, 0.0, 0.0);
    float3 nor;
    
    nor.x = map_octahedron(pos+eps.xyy) - map_octahedron(pos-eps.xyy);
    nor.y = map_octahedron(pos+eps.yxy) - map_octahedron(pos-eps.yxy);
    nor.z = map_octahedron(pos+eps.yyx) - map_octahedron(pos-eps.yyx);
    
    return normalize(nor);
}

ps_output ps_octahedron( vs_output input )
{
    float2 uv = bend_tc(input.texcoord.xy);
    float eps = 0.005;
    
    float iTime = mod(user_data.y * 3.0, 200.0);
    float2 iResolution = float2(640.0, 480.0);

    float3 ro;
    float3 rd;
    cam_anim(uv, iTime, ro, rd);
    
    float d = 10.0;
    float xt = 0.0;
    float3 pp = ro;
   
    for(float t = 0.0; t < 20.0; ++t)
    {
        pp = ro + rd * xt;
        d = map_octahedron(pp);
        
        if(d < eps)
            break;
        
        xt += d;
    }
    
    float3 n = calc_normal_octahedron(pp);    
    float3 col = irrid(n, rd);
    
    float mask = step(d, eps);
    float inv_mask = 1.0 - mask;
    
    float3 csky = sky(rd, iTime + 10.0);
    csky = csky.zyx;
        
    float3 cc = crt_c(csky * inv_mask + col * mask, uv);
    ps_output output;    
    output.colour = float4(cc, 1.0);
    return output;
}

float map_box(float3 p)
{
    return sd_box(p, float3(2.5, 2.5, 2.5));
}

float3 calc_normal_box(float3 pos)
{
    float3 eps = float3(0.001, 0.0, 0.0);
    float3 nor;
    
    nor.x = map_box(pos+eps.xyy) - map_box(pos-eps.xyy);
    nor.y = map_box(pos+eps.yxy) - map_box(pos-eps.yxy);
    nor.z = map_box(pos+eps.yyx) - map_box(pos-eps.yyx);
    
    return normalize(nor);
}

ps_output ps_box( vs_output input )
{
    float2 uv = bend_tc(input.texcoord.xy);
    float eps = 0.005;
    
    float iTime = mod(user_data.y * 3.0, 200.0);
    float2 iResolution = float2(640.0, 480.0);

    float3 ro;
    float3 rd;
    cam_anim(uv, iTime, ro, rd);
    
    float d = 10.0;
    float xt = 0.0;
    float3 pp = ro;
   
    for(float t = 0.0; t < 20.0; ++t)
    {
        pp = ro + rd * xt;
        d = map_box(pp);
        
        if(d < eps)
            break;
        
        xt += d;
    }
    
    float3 n = calc_normal_box(pp);    
    float3 col = irrid(n, rd);
    
    float mask = step(d, eps);
    float inv_mask = 1.0 - mask;
    
    float3 csky = sky(rd, iTime + 10.0);
        
    float3 cc = crt_c(csky * inv_mask + col * mask, uv);
    ps_output output;    
    output.colour = float4(cc, 1.0);
    return output;
}

float map_torus(float3 p)
{
    return sd_torus(p, float2(2.5, 1.0));
}

float3 calc_normal_torus(float3 pos)
{
    float3 eps = float3(0.001, 0.0, 0.0);
    float3 nor;
    
    nor.x = map_torus(pos+eps.xyy) - map_torus(pos-eps.xyy);
    nor.y = map_torus(pos+eps.yxy) - map_torus(pos-eps.yxy);
    nor.z = map_torus(pos+eps.yyx) - map_torus(pos-eps.yyx);
    
    return normalize(nor);
}

ps_output ps_torus( vs_output input )
{
    float2 uv = bend_tc(input.texcoord.xy);
    float eps = 0.005;
    
    float iTime = mod(user_data.y * 3.0, 200.0);
    float2 iResolution = float2(640.0, 480.0);

    float3 ro;
    float3 rd;
    cam_anim(uv, iTime, ro, rd);
    
    float d = 10.0;
    float xt = 0.0;
    float3 pp = ro;
   
    for(float t = 0.0; t < 30.0; ++t)
    {
        pp = ro + rd * xt;
        d = map_torus(pp);
        
        if(d < eps)
            break;
        
        xt += d;
    }
    
    float3 n = calc_normal_torus(pp);    
    float3 col = irrid(n, rd);
    
    float mask = step(d, eps);
    float inv_mask = 1.0 - mask;
    
    float3 csky = sky(rd, iTime + 10.0);
    csky = csky.zxy;
    
    float3 cc = crt_c(csky * inv_mask + col * mask, uv);
    ps_output output;    
    output.colour = float4(cc, 1.0);
    return output;
}


pmfx:
{    
    "box":
    {
        "vs": "vs_ndc_quad",
        "ps": "ps_box"
    },
    
    "octahedron":
    {
        "vs": "vs_ndc_quad",
        "ps": "ps_octahedron"
    },
    
    "torus":
    {
        "vs": "vs_ndc_quad",
        "ps": "ps_torus"
    }
}