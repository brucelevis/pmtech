#include "../../../assets/shaders/libs/globals.pmfx"

struct boid
{
    float4 pos;
    float4 vel;
    float4 dir;
};

struct vs_input
{
    float4 position : POSITION;
    float4 normal : TEXCOORD0;
    float4 texcoord : TEXCOORD1;
    float4 tangent : TEXCOORD2;
    float4 bitangent : TEXCOORD3;
};

struct vs_output
{
    float4 position : SV_POSITION;
    float4 world_pos : TEXCOORD0;
    float3 normal : TEXCOORD1;
    float3 tangent : TEXCOORD2;
    float3 bitangent : TEXCOORD3;
    float4 texcoord : TEXCOORD4;
    float4 colour : TEXCOORD5;
};

struct ps_output
{
    float4 colour : SV_Target;
};

cbuffer controls : register(b0)
{
    float4 info; // x = boid count
    float4 target;
};

shader_resources
{
    texture_2d( diffuse_texture, 0 );
    structured_buffer_rw( boid, rw_boids, 12 );
    structured_buffer( boid, read_boids, 13 );
};

void cs_main_boids(uint3 gid : SV_DispatchThreadID)
{        
    float3 p = rw_boids[gid.x].pos.xyz;
    float3 vel = rw_boids[gid.x].vel.xyz * 0.99;
        
    // toward target
    float3 vp = target.xyz;
    float3 tt = vp-p;
    vel += normalize(tt) * 0.1;
    
    float3 mv = float3(0.0, 0.0, 0.0);
    float3 mp = float3(0.0, 0.0, 0.0);
    for(int i = 0; i < info.x; ++i)
    {
        mp += rw_boids[i].pos.xyz;
        mv += rw_boids[gid.x].vel.xyz;
    }   
    
    mp /= info.x;
    mv /= info.x;
    
    vel += normalize(mp-p) * 0.1;
        
    // avoidance
    for(int i = 0; i < 32*32; ++i)
    {   
        if(i == gid.x)
            continue;
            
        float3 p2 = rw_boids[i].pos.xyz;
        float3 tp = p - p2;
        
        if(dot(tp, tp) > 0)
        {
            float l = length(tp);
        
            if(l < 0.1)
                vel += normalize(tp) * 0.1;
        }
    }
    
    vel = lerp(mv, vel, 0.5);

    rw_boids[gid.x].vel.xyz = vel.xyz;
    rw_boids[gid.x].pos.xyz += rw_boids[gid.x].vel.xyz;
    
    float3 min = float3(-50.0, 0.0, -50.0);
    float3 max = float3( 50.0, 50.0,  50.0);
    
    for(int a = 0; a < 3; ++a)
    {
        if(rw_boids[gid.x].pos[a] < min[a])
        {
            rw_boids[gid.x].pos[a] = min[a];
            rw_boids[gid.x].vel[a] *= -1.0;
        }
        
        if(rw_boids[gid.x].pos[a] > max[a])
        {
            rw_boids[gid.x].pos[a] = max[a];
            rw_boids[gid.x].vel[a] *= -1.0;
        }
    } 
    
    if(info.y >= 1.0)
    {
        float y = gid.x / 32;
        float x = gid.x % 32;
        rw_boids[gid.x].pos.xyz = float3(x, y, 100.0);
        rw_boids[gid.x].vel.xyz = float3(0.0, 0.0, 0.0);
    }
    
    rw_boids[gid.x].pos.w = 0.0;
}

vs_output vs_main( vs_input input, uint ii : SV_InstanceID, uint vi : SV_VertexID )
{
    vs_output output;
    
    float4 boid_pos = input.position + read_boids[ii].pos;
    
    output.position = output.position = mul( boid_pos, vp_matrix );
    
    return output;
}


ps_output ps_constant_colour( vs_output input ) 
{
    ps_output output;    
    output.colour = float4(0.0, 1.0, 0.0, 1.0);
    return output;
}

pmfx:
{    
    "boids_update":
    {
        "supported_platforms":
        {
            "hlsl": ["5_0"],
            "metal": ["all"]
        },
        
        "cs" : "cs_main_boids",
        "threads": [10, 1, 1]
    },
    
    "boids_render":
    {
        "supported_platforms":
        {
            "hlsl": ["5_0"],
            "metal": ["all"]
        },
        
        "vs": "vs_main",
        "ps": "ps_constant_colour"
    }
}



